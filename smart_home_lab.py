import time
import os
import threading
from datetime import datetime

class SmartHomeLab:
    def __init__(self):
        self.devices = {
            "lamp_living_room": {
                "name": "–°–≤–µ—Ç –≤ –≥–æ—Å—Ç–∏–Ω–æ–π", 
                "type": "light", 
                "state": "off",
                "brightness": 100
            },
            "thermostat": {
                "name": "–¢–µ—Ä–º–æ—Å—Ç–∞—Ç",
                "type": "climate", 
                "state": "off",
                "temperature": 22
            },
            "security_camera": {
                "name": "–ö–∞–º–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "type": "security",
                "state": "off",
                "recording": False
            }
        }
        self.server_log = []
        self.device_log = []
        self.client_log = []
        self.running = True
        
    def log_message(self, component, message):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {component}: {message}"
        
        if component == "SERVER":
            self.server_log.append(log_entry)
            print(f"üîß {log_entry}")
        elif component == "DEVICE":
            self.device_log.append(log_entry)
            print(f"üí° {log_entry}")
        elif component == "CLIENT":
            self.client_log.append(log_entry)
            print(f"üì± {log_entry}")
    
    def emulate_server(self):
        """–≠–º—É–ª—è—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏"""
        self.log_message("SERVER", "üöÄ –°–µ—Ä–≤–µ—Ä –£–º–Ω–æ–≥–æ –¥–æ–º–∞ –∑–∞–ø—É—â–µ–Ω")
        self.log_message("SERVER", "üìç –ü–æ—Ä—Ç: 8000")
        self.log_message("SERVER", "‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∫–æ–º–∞–Ω–¥")
        
        while self.running:
            # –°–µ—Ä–≤–µ—Ä "—Å–ª—É—à–∞–µ—Ç" –∫–æ–º–∞–Ω–¥—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
            time.sleep(1)
    
    def emulate_devices(self):
        """–≠–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã —É–º–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        self.log_message("DEVICE", "üöÄ –ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        
        previous_states = {device_id: info["state"] for device_id, info in self.devices.items()}
        
        while self.running:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            for device_id, info in self.devices.items():
                current_state = info["state"]
                if current_state != previous_states[device_id]:
                    old_state = previous_states[device_id]
                    self.log_message("DEVICE", f"üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï: {info['name']} {old_state} ‚Üí {current_state}")
                    
                    # –≠–º—É–ª—è—Ü–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    if current_state == "on":
                        if device_id == "lamp_living_room":
                            self.log_message("DEVICE", "üí° –õ–∞–º–ø–∞ –≤ –≥–æ—Å—Ç–∏–Ω–æ–π –∑–∞–≥–æ—Ä–µ–ª–∞—Å—å")
                        elif device_id == "thermostat":
                            self.log_message("DEVICE", "üå°Ô∏è –¢–µ—Ä–º–æ—Å—Ç–∞—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
                        elif device_id == "security_camera":
                            self.log_message("DEVICE", "üìπ –ö–∞–º–µ—Ä–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å—å")
                    else:
                        if device_id == "lamp_living_room":
                            self.log_message("DEVICE", "‚ö´ –õ–∞–º–ø–∞ –≤ –≥–æ—Å—Ç–∏–Ω–æ–π –ø–æ–≥–∞—Å–ª–∞")
                        elif device_id == "thermostat":
                            self.log_message("DEVICE", "üå°Ô∏è –¢–µ—Ä–º–æ—Å—Ç–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        elif device_id == "security_camera":
                            self.log_message("DEVICE", "üìπ –ö–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    
                    previous_states[device_id] = current_state
            
            time.sleep(2)
    
    def send_command(self, device_id, action):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"""
        if device_id in self.devices:
            old_state = self.devices[device_id]["state"]
            
            if action == "toggle":
                new_state = "on" if old_state == "off" else "off"
            else:
                new_state = action
            
            self.devices[device_id]["state"] = new_state
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            self.log_message("SERVER", f"üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {device_id} -> {action}")
            self.log_message("SERVER", f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {old_state} ‚Üí {new_state}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–ª–∏–µ–Ω—Ç–µ
            self.log_message("CLIENT", f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {action} –¥–ª—è {self.devices[device_id]['name']}")
            self.log_message("CLIENT", f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {self.devices[device_id]['name']} —Ç–µ–ø–µ—Ä—å {new_state}")
            
            return True
        return False
    
    def show_system_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        print("\n" + "üè†" + "="*58 + "üè†")
        print("              –°–ò–°–¢–ï–ú–ê –£–ú–ù–´–ô –î–û–ú - –õ–ê–ë–û–†–ê–¢–û–†–ù–ê–Ø –†–ê–ë–û–¢–ê")
        print("üè†" + "="*58 + "üè†")
        
        print("\nüìä –°–û–°–¢–û–Ø–ù–ò–ï –£–°–¢–†–û–ô–°–¢–í:")
        print("-" * 60)
        for device_id, info in self.devices.items():
            state_icon = "üí°" if info["state"] == "on" else "‚ö´"
            state_text = "–í–ö–õ–Æ–ß–ï–ù" if info["state"] == "on" else "–í–´–ö–õ–Æ–ß–ï–ù"
            print(f"{state_icon} {info['name']}: {state_text}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if device_id == "thermostat" and info["state"] == "on":
                print(f"   üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {info['temperature']}¬∞C")
            elif device_id == "lamp_living_room" and info["state"] == "on":
                print(f"   üí° –Ø—Ä–∫–æ—Å—Ç—å: {info['brightness']}%")
            elif device_id == "security_camera" and info["state"] == "on":
                print(f"   üìπ –ó–∞–ø–∏—Å—å: {'–í–ö–õ–Æ–ß–ï–ù–ê' if info['recording'] else '–í–´–ö–õ–Æ–ß–ï–ù–ê'}")
    
    def show_logs(self, log_type):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        os.system('clear')
        print(f"\nüìã –õ–û–ì–ò {log_type}:")
        print("=" * 70)
        
        if log_type == "SERVER":
            logs = self.server_log[-15:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–ø–∏—Å–µ–π
        elif log_type == "DEVICE":
            logs = self.device_log[-15:]
        elif log_type == "CLIENT":
            logs = self.client_log[-15:]
        else:
            logs = []
        
        for log in logs:
            print(log)
        
        input(f"\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
    
    def run_demo_scenario(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        print("\nüé¨ –ó–ê–ü–£–°–ö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–û–ì–û –°–¶–ï–ù–ê–†–ò–Ø...")
        time.sleep(1)
        
        steps = [
            ("lamp_living_room", "on", "–í–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞ –≤ –≥–æ—Å—Ç–∏–Ω–æ–π"),
            ("thermostat", "on", "–í–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç–∞"),
            ("security_camera", "on", "–í–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"),
            ("lamp_living_room", "off", "–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞ –≤ –≥–æ—Å—Ç–∏–Ω–æ–π"),
            ("thermostat", "off", "–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç–∞"),
        ]
        
        for device_id, action, description in steps:
            print(f"\nüéØ {description}...")
            self.send_command(device_id, action)
            time.sleep(2)
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
    
    def display_main_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        while self.running:
            os.system('clear')
            self.show_system_status()
            
            print("\nüéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô:")
            print("=" * 40)
            print("1. üí° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–º –≤ –≥–æ—Å—Ç–∏–Ω–æ–π")
            print("2. üå°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç–æ–º")
            print("3. üìπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            print("4. üìä –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞")
            print("5. üí° –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            print("6. üì± –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∫–ª–∏–µ–Ω—Ç–∞")
            print("7. üé¨ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è")
            print("8. üö™ –í—ã—Ö–æ–¥")
            print("=" * 40)
            
            try:
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-8): ").strip()
                
                if choice == "1":
                    self.manage_light()
                elif choice == "2":
                    self.manage_thermostat()
                elif choice == "3":
                    self.manage_camera()
                elif choice == "4":
                    self.show_logs("SERVER")
                elif choice == "5":
                    self.show_logs("DEVICE")
                elif choice == "6":
                    self.show_logs("CLIENT")
                elif choice == "7":
                    self.run_demo_scenario()
                elif choice == "8":
                    self.log_message("SERVER", "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã")
                    self.running = False
                    break
                else:
                    input("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ù–∞–∂–º–∏—Ç–µ Enter...")
                    
            except KeyboardInterrupt:
                self.running = False
                break
    
    def manage_light(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–º"""
        while True:
            os.system('clear')
            current_state = self.devices["lamp_living_room"]["state"]
            state_text = "–í–ö–õ–Æ–ß–ï–ù" if current_state == "on" else "–í–´–ö–õ–Æ–ß–ï–ù"
            
            print(f"üí° –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–í–ï–¢–û–ú –í –ì–û–°–¢–ò–ù–û–ô")
            print("=" * 40)
            print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state_text}")
            print(f"–Ø—Ä–∫–æ—Å—Ç—å: {self.devices['lamp_living_room']['brightness']}%")
            print("\n1. –í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç")
            print("2. –í—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç")
            print("3. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç")
            print("4. –ù–∞–∑–∞–¥")
            
            sub_choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
            
            if sub_choice == "1":
                self.send_command("lamp_living_room", "on")
            elif sub_choice == "2":
                self.send_command("lamp_living_room", "off")
            elif sub_choice == "3":
                self.send_command("lamp_living_room", "toggle")
            elif sub_choice == "4":
                break
            else:
                input("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ù–∞–∂–º–∏—Ç–µ Enter...")
            
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def manage_thermostat(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç–æ–º"""
        while True:
            os.system('clear')
            current_state = self.devices["thermostat"]["state"]
            state_text = "–í–ö–õ–Æ–ß–ï–ù" if current_state == "on" else "–í–´–ö–õ–Æ–ß–ï–ù"
            
            print(f"üå°Ô∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ï–†–ú–û–°–¢–ê–¢–û–ú")
            print("=" * 40)
            print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state_text}")
            print(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {self.devices['thermostat']['temperature']}¬∞C")
            print("\n1. –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç")
            print("2. –í—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç")
            print("3. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç")
            print("4. –ù–∞–∑–∞–¥")
            
            sub_choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
            
            if sub_choice == "1":
                self.send_command("thermostat", "on")
            elif sub_choice == "2":
                self.send_command("thermostat", "off")
            elif sub_choice == "3":
                self.send_command("thermostat", "toggle")
            elif sub_choice == "4":
                break
            else:
                input("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ù–∞–∂–º–∏—Ç–µ Enter...")
            
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def manage_camera(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        while True:
            os.system('clear')
            current_state = self.devices["security_camera"]["state"]
            state_text = "–í–ö–õ–Æ–ß–ï–ù–ê" if current_state == "on" else "–í–´–ö–õ–Æ–ß–ï–ù–ê"
            
            print(f"üìπ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ú–ï–†–û–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
            print("=" * 40)
            print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state_text}")
            print("\n1. –í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É")
            print("2. –í—ã–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É")
            print("3. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É")
            print("4. –ù–∞–∑–∞–¥")
            
            sub_choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
            
            if sub_choice == "1":
                self.send_command("security_camera", "on")
            elif sub_choice == "2":
                self.send_command("security_camera", "off")
            elif sub_choice == "3":
                self.send_command("security_camera", "toggle")
            elif sub_choice == "4":
                break
            else:
                input("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ù–∞–∂–º–∏—Ç–µ Enter...")
            
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –£–ú–ù–´–ô –î–û–ú...")
        time.sleep(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–º—É–ª—è—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
        server_thread = threading.Thread(target=self.emulate_server)
        server_thread.daemon = True
        server_thread.start()
        
        device_thread = threading.Thread(target=self.emulate_devices)
        device_thread.daemon = True
        device_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.display_main_menu()
        
        print("\nüëã –°–ò–°–¢–ï–ú–ê –ó–ê–í–ï–†–®–ò–õ–ê –†–ê–ë–û–¢–£")
        print("üìã –î–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≥–æ—Ç–æ–≤–æ:")
        print("   ‚úÖ –ú–æ–¥–µ–ª—å –ñ–¶ (–∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è)")
        print("   ‚úÖ –≠—Ç–∞–ø—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã–¥–µ–ª–µ–Ω—ã") 
        print("   ‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        print("   ‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç")

if __name__ == "__main__":
    lab_system = SmartHomeLab()
    lab_system.run()